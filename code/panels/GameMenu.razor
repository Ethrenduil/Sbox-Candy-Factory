@using Sandbox;
@using Sandbox.UI;
@using Sandbox.UI.Construct;
@using Sandbox.Network;
@using Sandbox.Diagnostics;
@using System;
@using System.Collections.Generic;
@using System.Diagnostics
@using System.Linq;
@using Sandbox.Services
@inherits PanelComponent;
@implements Component.INetworkListener;

@attribute [StyleSheet]

<root>
	<img src="textures\ui\menu\menuBackground.jpg" class="background" alt=""/>
	<div class="content">
		<img src="textures\ui\menu\logo.png" class="logo" alt=""/>
		@if ( _isContentVisible ) {
			<a class="btn create" onclick="@CreateRoom">
				<h1 class="btn-txt">Create a Room</h1>
			</a>
			<a class="btn join" onclick="@DisplayJoinRoom">
				<h1 class="btn-txt">Join a Room</h1>
			</a>
			<a class="btn settings" onclick="@DisplaySettings">
				<h1 class="btn-txt">Settings</h1>
			</a>
			<a class="btn quit" onclick="@QuitGame">
				<h1 class="btn-txt">Quit</h1>
			</a>
		} else if ( _isJoinRoomVisible ) {
			<div class="display-list lobby-list">
				<div class="header">
					<div class="title">Server List</div>
				</div>
				<div class="content-list">
					@if (refreshing) {
						<div class="status-info">Refreshing..</div>
					} else if (list.Count == 0) {
						<div class="status-info">No lobbies were found</div>
					} else {
						@foreach (var lobby in list) {
							<div class="btn-lobby" onclick=@(() => OpenLobby( lobby ) )>
								<div class="title">
									<p>@lobby.Name</p>
								</div>
								<div class="meta">
									<div class="count">
										<p>@lobby.Members/4</p>
									</div>
								</div>
							</div>
						}
					}
				</div>
			</div>
			<a class="btn refresh-join" onclick="@RefreshLobbyList">
				<h1 class="btn-txt refresh">Refresh</h1>
			</a>
			<a class="btn back">
				<h1 class="btn-txt" onclick="@DisplayContent">Back</h1>
			</a>
		} else if ( _isSettingsVisible ) {
			<div class="display-list settings">
			<div class="header">
				<div class="title">Settings</div>
			</div>
			<div class="setting-section">
				<div class="setting-title">Display</div>
				<div class="setting-option">
					<span class="option-title">Resolution</span>
					<select class="option-content resolution-dropdown" onselect="">
						<option value="1920x1080">1920x1080</option>
						<option value="1280x720">1280x720</option>
					</select>
				</div>
			</div>
			<div class="setting-section">
				<div class="setting-title">Audio</div>
				<div class="setting-option">
					<span class="option-title">Volume</span>
					<div class="option-volume">
						<span class="option-operator" onclick="@AdjustVolume" value="-">-</span>
						<span class="option-content" value="@settings.Volume">@settings.GetStringVolume()</span>
						<span class="option-operator" onclick="@AdjustVolume" value="+">+</span>
					</div>
				</div>
			</div>
			</div>
			<a class="btn back">
				<h1 class="btn-txt" onclick="@DisplayContent">Back</h1>
			</a>
		}
	</div>
</root>

@code {
	private bool _isContentVisible = true;
	private bool _isJoinRoomVisible = false;
	private bool _isSettingsVisible = false;
	bool refreshing;
	List<LobbyInformation> list = new();
	[Property] public SoundEvent buttonClickSound { get; set; }
	[Property] public Settings settings { get; set; }

	protected override void OnStart()
	{
		base.OnStart();
		settings = GameObject.Components.Get<Settings>();
	}


	void DisplayContent()
	{
		PlaySound();
		_isContentVisible = true;
		_isJoinRoomVisible = false;
	}

	void DisplayJoinRoom()
	{
		RefreshLobbyList();
		PlaySound();
		_isContentVisible = false;
		_isJoinRoomVisible = true;
	}

	void DisplaySettings()
	{
		PlaySound();
		_isContentVisible = false;
		_isJoinRoomVisible = false;
		_isSettingsVisible = true;
		StateHasChanged();
	}

	void CreateRoom()
	{
		PlaySound();
		Game.ActiveScene.LoadFromFile("scenes/candy_factory.scene");
		GameNetworkSystem.CreateLobby();
	}

	async void RefreshLobbyList()
	{
		PlaySound();
		StateHasChanged();
		refreshing = true;
		list = await Networking.QueryLobbies();
		refreshing = false;
		StateHasChanged();
	}
	
	void OpenLobby(LobbyInformation lobby)
	{
		PlaySound();
		if (lobby.Members >= 4) return;
		GameNetworkSystem.Connect(lobby.LobbyId);
		Game.ActiveScene.LoadFromFile("scenes/candy_factory.scene");
	}

	void QuitGame()
	{
		PlaySound();
		Game.Close();
	}

	void PlaySound()
	{
		buttonClickSound.Volume = settings.Volume / 1000;
		buttonClickSound.UI = true;
		Sound.Play(buttonClickSound);
	}

	public string GetVolumeSettings()
	{
		return settings.Volume.ToString();
	}

	public void AdjustVolume(PanelEvent e)
	{
		PlaySound();
		// Get element value
		var sign = e.This.StringValue == "-" ? -1 : 1;
		var wishQuantity = settings.Volume + sign * 5;

		// Check if the quantity is valid
		if (wishQuantity <= 0) wishQuantity = 0;
		if (wishQuantity >= 100) wishQuantity = 100;

		// Set the new value
		settings.SetVolume(wishQuantity);
		// Update the UI
		StateHasChanged();
	}
}
