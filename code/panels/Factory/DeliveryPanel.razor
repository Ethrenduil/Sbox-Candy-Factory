@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent

<root class="@(isDeliveryWindowOpen ? "deliveryPanel" : "")">
	@if (isDeliveryWindowOpen)
	{
		<div class="backContent">
			<button class="backButton" onclick="@CloseDeliveryWindow">Back</button>
		</div>
		<div class="window">
			<div class="deliveryWindow">
				<div class="deliveryWindowHeader">
					<div class="deliveryWindowHeaderTitle">Delivery</div>
					<div class="deliveryWindowHeaderButton">
						<button class="deliveryWindowHeaderButtonConfirm" onclick="@ConfirmOrder">Confirm</button>
					</div>
				</div>
				<div class="deliveryWindowContent">
					@foreach (var item in Items)
					{
						<div class="deliveryWindowContentItem">
							<div class="deliveryWindowContentItemIcon">
								<img src="https://via.placeholder.com/64" alt="itemIcon" />
							</div>
							<div class="deliveryWindowContentItemName" value="@item.Key">@item.Key</div>
							<button class="deliveryWindowContentItemQuantityButton minus" onclick="@AdjustQuantity" value="-">-</button>
							<div class="deliveryWindowContentItemAmount" value="@GetOrderQuantity(item.Key)">@GetOrderQuantity(item.Key)</div>
							<div class="deliveryWindowContentItemQuantityButton plus" onclick="@AdjustQuantity" value="+">+</div>
							<div class="deliveryWindowContentItemPrice" value="@item.Value">$@item.Value</div>
						</div>
					}
				</div>
				<div class="deliveryWindowFooter">
					<div class="deliveryWindowFooterNumber">
						<div class="deliveryWindowFooterTotal">
							<div class="deliveryWindowFooterTotalTitle">Total: </div>
							<div class="deliveryWindowFooterTotalContent">$@GetTotalNumber()</div>
						</div>
						<div class="deliveryWindowFooterMoney">
							<div class="deliveryWindowFooterMoneyTitle">Money: </div>
							<div class="deliveryWindowFooterMoneyContent">$@player.GetMoney()</div>
						</div>
					</div>
					<div class="deliveryWindowFooterTips">
						<div class="deliveryWindowFooterTipsTitle">Tips: </div>
						<div class="deliveryWindowFooterTipsContent">@MessageTips</div>
					</div>
				</div>
			</div>
		</div>
	}
</root>

@code
{
	[Property] public string MessageTips { get; set; } = "You can order items.";
	[Property] public Dictionary<string, int> Items { get; set; }
	[Property] public Dictionary<string, int> order { get; set; }
	[Property] public Delivery Delivery { get; set; }
	[Property] public Factory Factory { get; set; }
	private bool isDeliveryWindowOpen { get; set; }
	private QuestSystem questSystem;
	private Player player;

	protected override void OnStart()
	{
		base.OnStart();
		player ??= Scene.GetAllComponents<Player>().FirstOrDefault( x => !x.IsProxy );
		Delivery = Scene.GetAllComponents<Delivery>().FirstOrDefault( x => !x.IsProxy );
		Factory = Scene.GetAllComponents<Factory>().FirstOrDefault( x => !x.IsProxy );
	}

	protected override void OnUpdate()
	{
		if (IsProxy) return;
		if (Input.EscapePressed && isDeliveryWindowOpen)
		{
			CloseDeliveryWindow();
		}
	}

    public void OpenDeliveryWindow()
	{
		// Open the delivery window
		isDeliveryWindowOpen = true;

		Items.Clear();

		// Set the delivery window properties
		var ItemsTemp = Delivery.GoodsPrices;

		// Get the player if it's not set
		player ??= Scene.GetAllComponents<Player>().FirstOrDefault( x => !x.IsProxy );

		foreach (var item in ItemsTemp)
		{
			Items.Add(Delivery.GetItemName(item.Key), item.Value);
		}
		player.InMenu = true;
		StateHasChanged();
	}

	public async void CloseDeliveryWindow()
	{
		// Close the delivery window
		order.Clear();
		isDeliveryWindowOpen = false;
		MessageTips = "You can order items.";
		StateHasChanged();
		await Task.Delay(100);
		player.InMenu = false;
	}

	// Adjust the quantity of an item when the user clicks the + or - button
	public void AdjustQuantity(PanelEvent e)
	{
		// Get element value
		var sign = e.This.StringValue == "-" ? -1 : 1;
		var item = e.This.Parent.Children.ToList()[1].StringValue;
		var wishQuantity = int.Parse(e.This.Parent.Children.ToList()[3].StringValue) + sign;

		// Check if the quantity is valid
		if (wishQuantity <= 0) wishQuantity = 0;
		if (!ErrorChecking(item, wishQuantity, sign)) SetOrderQuantity(item, wishQuantity);
		// Update the UI
		StateHasChanged();
	}

	// Get the order quantity of an item from the order dictionary
	public string GetOrderQuantity(string item)
	{
		if (order.ContainsKey(item))
		{
			return order[item].ToString();
		}
		return "0";
	}

	// Set the order quantity of an item in the order dictionary
	public void SetOrderQuantity(string item, int quantity)
	{
		if (quantity == 0)
		{
			order.Remove(item);
		}
		else if (order.ContainsKey(item))
		{
			order[item] = quantity;
		}
		else
		{
			order.Add(item, quantity);
		}
	}

	public bool ErrorChecking(string item, int wishQuantity, int sign)
	{
		var wishTotal = GetTotalNumber() + (Items[item] * sign);
		if (wishTotal > player.GetMoney())
		{
			MessageTips = "You don't have enough money to buy more.";
			return true;
		}

		if (!Factory.CanStore(GetTotalQuantity()))
		{
			MessageTips = "You don't have enough space to store the items.";
			return true;
		}
		return false;
	}

	// Confirm the order and retrieve the goods from delivery
	public void ConfirmOrder()
	{
		// Check if the order is empty
		if (order.Count == 0)
		{
			MessageTips = "You have to select at least one item.";
			StateHasChanged();
			return;
		}

		// Check if the player can order
		if (!Delivery.CanDeliver()) 
		{
			MessageTips = "Delivery is not available.";
			StateHasChanged();
			return;
		}
		player.RemoveMoney(GetTotalNumber());
		Delivery.StartDelivery(Delivery.GetDictionaryGoodsFromString(order));
		questSystem ??= Scene.GetAllComponents<QuestSystem>().FirstOrDefault();
		if (questSystem is not null && questSystem.CurrentQuest is not null)
		{
			foreach (QuestObjective objective in questSystem.CurrentQuest.Objectives)
			{
				if (objective.Type == ObjectiveType.ResourceOrdering)
				{
				    questSystem.CompleteObjective(objective);
				}
			}
		}
		CloseDeliveryWindow();
	}

	public int GetTotalNumber()
	{
		var total = 0;
		foreach (var item in order)
		{
			total += Items[item.Key] * item.Value;
		}
		return total;
	}

	public int GetTotalQuantity()
	{
		var total = 0;
		foreach (var item in order)
		{
			total += item.Value;
		}
		return total;
	}
}
