@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent

<root>
	<img class="candy-model" src="@CandyIcon" />
	@if (CandyName.Length > 15)
	{
		<div class="title" style="font-size: 30px;">@CandyName</div>
	}
	else
	{
		<div class="title">@CandyName</div>
	}
	@if (TotalCookingTime > 0)
	{
		<div class="remaining-time-bar">
			<div class="remaining-time-fill" style="width: @remainingTimePercentage%;"></div>
		</div>
	} else {
		<div class="ingredients">
			@CandyIngredients
		</div>
	}
</root>

@code
{
	[Property] public GameObject candy { get; set; }
	public float CurrentCookingTime = 0;
	public string CandyName = "None";
	public string CandyIcon = "None";
	public string CandyIngredients = "None";
	public int remainingTimePercentage = 0;
	public float TotalCookingTime = 0;

	protected override void OnEnabled()
	{
		base.OnEnabled();
		var temp = candy.Clone();
		CandyName = temp.Components.Get<Candies>().Name;
		CandyIcon = "textures/ui/candies/" + CandyName.ToLower().Replace(" ", "_") + ".png";
		CandyIngredients = temp.Components.Get<Candies>().GetIngredientsString();
		StateHasChanged();
		temp.Destroy();
	}

	public async void StartCooking(float cookingTime)
	{
		StateHasChanged();
		TotalCookingTime = cookingTime;
		while (CurrentCookingTime < TotalCookingTime)
		{
			await GameTask.DelaySeconds(1);
			CurrentCookingTime++;
			remainingTimePercentage = (int)((CurrentCookingTime / TotalCookingTime) * 100);
			StateHasChanged();
		}
		CurrentCookingTime = 0;
		TotalCookingTime = 0;
		remainingTimePercentage = 0;
		StateHasChanged();
	}

	public bool CanCook(Dictionary<DeliveryGoods, int> goods)
	{
		var temp = candy.Clone();
		var candyComp = temp.Components.Get<Candies>();
		var canCook = candyComp.CanCook(goods);
		temp.Destroy();
		return canCook;
	}

	public Dictionary<DeliveryGoods, int> GetIngredients()
	{
		var temp = candy.Clone();
		var candyComp = temp.Components.Get<Candies>();
		var ingredients = candyComp.GetIngredients();
		temp.Destroy();
		return ingredients;
	}
}
