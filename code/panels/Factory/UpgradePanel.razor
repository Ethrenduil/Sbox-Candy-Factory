@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent

<root class="@(isUpgradeWindowOpen ? "upgradePanel" : "")">
	@if (isUpgradeWindowOpen)
	{
		<div class="backContent">
			<button class="backButton" onclick="@CloseUpgradeWindow">Back</button>
		</div>
		<div class="window">
			<div class="upgradeWindow">
				<div class="upgradeWindowHeader">
					<div class="upgradeWindowHeaderTitle">Upgrade</div>
				</div>
				<div class="upgradeWindowProductionLineArea">
					<div class="upgradeWindowProductionLineAreaTitle">Production Line</div>
					<div class="upgradeWindowProductionLineAreaContent">
						<div class="upgradeWindowProductionLineAreaContentLine">
							@* For each production line that production system got *@
							@foreach (var item in ItemsProd)
							{
								<div class="upgradeWindowProductionLineAreaContentLineItem @(ProductionSystem.IsProductionLineLocked(item.Key) ? "locked" : "") @(ProductionSystem.IsProductionLineFullUpgraded(item.Key) ? "upgraded" : "")" onclick="@AdjustProductionLine">
									<div class="upgradeWindowProductionLineAreaContentLineItemName" value="@item.Key">@item.Key</div>
									<div class="upgradeWindowContentItemIcon"><img src="@GetUpgradeIcon(item.Key)" alt="itemIcon" /></div>
									<div class="upgradeWindowProductionLineAreaContentItemPrice" value="@item.Value">@item.Value</div>
								</div>
							}
							@* End for each *@
							
						</div>
					</div>
				</div>
				<div class="upgradeWindowProductionLineArea">
					<div class="upgradeWindowProductionLineAreaTitle">Factory</div>
					<div class="upgradeWindowProductionLineAreaContent">
					@* For each production line that production system got *@
						<div class="upgradeWindowProductionLineAreaContentLine">
							@foreach (var item in ItemsFac)
							{
								<div class="upgradeWindowProductionLineAreaContentLineItem" onclick="@AdjustQuantity">
									@* For each furnace and upgrader in the production line *@
									@* need to add a class if its lock (1->2->3->4) *@
									<div class="upgradeWindowProductionLineAreaContentLineItemName" value="@item.Key">@item.Key</div>
									<div class="upgradeWindowContentItemIcon"><img src="@GetUpgradeIcon(item.Key)" alt="itemIcon" /></div>
									<div class="upgradeWindowProductionLineAreaContentItemPrice" value="@item.Value">@item.Value</div>
									@* End for each *@
								</div>
							}
						</div>
					@* End for each *@
					</div>
				</div>
				<div class="upgradeWindowFooter">
					<div class="upgradeWindowFooterNumber">
						<div class="upgradeWindowFooterMoney">
							<div class="upgradeWindowFooterMoneyTitle">Money: </div>
							<div class="upgradeWindowFooterMoneyContent">$@player.GetMoney()</div>
						</div>
					</div>
					<div class="upgradeWindowFooterTips">
						<div class="upgradeWindowFooterTipsTitle">Tips: </div>
						<div class="upgradeWindowFooterTipsContent">@MessageTips</div>
					</div>
				</div>
			</div>
		</div>
	}
</root>

@code
{
	[Property] public string MessageTips { get; set; } = "You can upgrade your items here.";
	[Property] public Dictionary<string, int> ItemsProd { get; set; } = new Dictionary<string, int>();
	[Property] public Dictionary<string, int> ItemsFac { get; set; } = new Dictionary<string, int>();
	[Property] public ProductionSystem ProductionSystem { get; set; }
	[Property] public Factory Factory { get; set; }
	private bool isUpgradeWindowOpen { get; set; }
	private Player player;

	protected override void OnStart()
	{
		base.OnStart();
	}

	protected override void OnEnabled()
	{
		base.OnEnabled();
		player = Scene.GetAllComponents<Player>().FirstOrDefault( x => !x.IsProxy );
		ProductionSystem = Scene.GetAllComponents<ProductionSystem>().FirstOrDefault( x => !x.IsProxy );
		Factory = Scene.GetAllComponents<Factory>().FirstOrDefault( x => !x.IsProxy );
	}

	protected override void OnUpdate()
	{
		if (IsProxy) return;

		if (Input.EscapePressed && isUpgradeWindowOpen)
		{
			CloseUpgradeWindow();
		}
	}

	public string GetUpgradeIcon(string item)
	{
		var temp = item.Split(' ')[0].ToLower();
		return $"textures/ui/upgrade/{temp}.png";
	}

    public void OpenUpgradeWindow()
	{
		// Open the upgrade window
		isUpgradeWindowOpen = true;

		ItemsProd.Clear();
		ItemsFac.Clear();

		// Set the production line items
		ProductionSystem ??= Scene.GetAllComponents<ProductionSystem>().FirstOrDefault( x => !x.IsProxy );
		var ItemsTemp = ProductionSystem.Upgrades;
		
		ItemsProd = ProductionSystem.GetProdList();
		ItemsFac = ProductionSystem.GetFacList();

		player.InMenu = true;
		StateHasChanged();
	}

	public async void CloseUpgradeWindow()
	{
		// Close the upgrade window
		isUpgradeWindowOpen = false;
		MessageTips = "You can upgrade your items here.";
		StateHasChanged();
		await Task.Delay(100);
		player.InMenu = false;
	}

	public void UpgradeProductionLine(PanelEvent e)
	{
		// Get element value
		var item = e.This.Parent.Children.ToList()[1].StringValue;
		ProductionSystem ??= Scene.GetAllComponents<ProductionSystem>().FirstOrDefault( x => !x.IsProxy );
		UpgradeType type = ProductionSystem.GetUpgradeType(item);
		int cost = ProductionSystem.GetUpgradeCost(type);

		// Update the UI
		StateHasChanged();
	}

	// Adjust the quantity of an item when the user clicks the + or - button
	public void AdjustQuantity(PanelEvent e)
	{
		// Get element value
		var item = e.This.Children.ToList()[0].StringValue;
		UpgradeType type = ProductionSystem.GetUpgradeType(item);
		int cost = ProductionSystem.GetUpgradeCost(type);


		// Check if the player has enough money to buy the upgrade
		if (!ErrorChecking(item, type, cost))
		{
			// Remove money from the player
			player.RemoveMoney(cost);

			// Upgrade the item
			ProductionSystem.Upgrade(type);

			// Upgrade the item
			ItemsFac[item] = ProductionSystem.GetUpgradeCost(type);

			// Update the UI
			MessageTips = "You have successfully upgraded the item.";
		}

		// Update the UI
		StateHasChanged();
	}

	public void AdjustProductionLine(PanelEvent e)
	{
		// Get element value
		var item = e.This.Children.ToList()[0].StringValue;
		UpgradeType type = ProductionSystem.GetProductionLineUpgradeType(item);
		int cost = int.Parse(e.This.Children.ToList()[2].StringValue);
		bool locked = e.This.Classes.Split(' ').Contains("locked");
		bool upgraded = e.This.Classes.Split(' ').Contains("upgraded");

		// Check if the production line is locked or already fully upgraded
		if (locked)
		{
			MessageTips = "This production line is locked.";
			return;
		}
		if (upgraded)
		{
			MessageTips = "This production line is already fully upgraded.";
			return;
		}
		
		// Check if the player has enough money to buy the upgrade
		if (!ErrorChecking(item, type, cost))
		{
			// Remove money from the player
			player.RemoveMoney(cost);

			// Upgrade the item
			ProductionSystem.Upgrade(type, true, int.Parse(item.Split(' ')[1]));

			// Upgrade the item
			ItemsProd = ProductionSystem.GetProdList();

			// Update the UI
			MessageTips = "You have successfully upgraded the item.";
		}

		// Update the UI
		StateHasChanged();
	
	}

	public bool ErrorChecking(string item, UpgradeType type, int cost)
	{
		if (cost > player.GetMoney())
		{
			MessageTips = "You don't have enough money to buy the upgrade.";
			return true;
		}
		return false;
	}
}
