@using Sandbox;
@using Sandbox.UI;
@using Sandbox.Network;
@inherits PanelComponent


<root>
    @if (IsPaused)
    {
        <div class="pause">
            <h2>Paused</h2>
            @if (!IsSettings)
            {
                <div class="options">
                    <div class="btn" @onclick="@ChangeState">
                        <p>Resume</p>
                    </div>
                    <div class="btn" @onclick="@SettingsState">
                        <p>Settings</p>
                    </div>
                    <div class="btn"@onclick="@Quit">
                        <p>Quit</p>
                    </div>
                </div>
            } else
            {
                <div class="options">
                    <div class="volumeOption">
                        <h3>Volume Music</h3>
                        <div class="volumeContent">
                            <div class="volumeBtn" onclick="@AdjustVolumeMusic" value="-">-</div>
                            <div class="volume">@settings.GetStringVolume(VolumeType.Music)</div>
                            <div class="volumeBtn" onclick="@AdjustVolumeMusic" value="+">+</div>                            
                        </div>
                    </div>
                    <div class="volumeOption">
                        <h3>Volume Sound</h3>
                        <div class="volumeContent">
                            <div class="volumeBtn" onclick="@AdjustVolumeSound" value="-">-</div>
                            <div class="volume">@settings.GetStringVolume(VolumeType.Sound)</div>
                            <div class="volumeBtn" onclick="@AdjustVolumeSound" value="+">+</div>
                        </div>
                    </div>
                    <div class="btn" @onclick="@SettingsState">
                        <p>Back</p>
                    </div>
                </div>
            }
        </div>
    }
</root>

@code {

    [Property]
    public bool IsPaused = false;
	private Player player;
    public bool IsSettings = false;
    private Settings settings = new Settings();

    protected override void OnStart()
    {
        base.OnStart();
        player = Scene.GetAllComponents<Player>().FirstOrDefault( x => !x.IsProxy );
        settings = player.GameObject.Components.Get<Settings>();
    }

        protected override void OnUpdate()
    {
        base.OnUpdate();

		player ??= Scene.GetAllComponents<Player>().FirstOrDefault(x => !x.IsProxy);
		settings ??= player.GameObject.Components.Get<Settings>();

        if (Input.EscapePressed)
        {
			if (!player.InCinematic && !player.InMenu)
           		ChangeState();
        }
    }

	protected void ChangeState()
	{
        if (player == null)
        {
            player = Scene.GetAllComponents<Player>().FirstOrDefault(x => !x.IsProxy);
            settings = player.GameObject.Components.Get<Settings>();
        }
		IsPaused = !IsPaused;
        if (!IsPaused) IsSettings = false;
		StateHasChanged();
	}

    private void SettingsState()
    {
        if (player == null)
        {
            player = Scene.GetAllComponents<Player>().FirstOrDefault(x => !x.IsProxy);
            settings = player.GameObject.Components.Get<Settings>();
        }
        IsSettings = !IsSettings;
        StateHasChanged();
    }

    private void Quit()
    {
        GameNetworkSystem.Disconnect();
        Game.ActiveScene.LoadFromFile("scenes/menu.scene");
    }

	public void AdjustVolumeMusic(PanelEvent e)
	{
		// Get element value
		var sign = e.This.StringValue == "-" ? -1 : 1;
		var wishQuantity = settings.GetVolume(VolumeType.Music) + sign * 5;

		// Check if the quantity is valid
		if (wishQuantity <= 0) wishQuantity = 0;
		if (wishQuantity >= 100) wishQuantity = 100;


		// Set the new value
		settings.SetVolume(VolumeType.Music, wishQuantity);
		// Update the UI
		StateHasChanged();
	}

    public void AdjustVolumeSound(PanelEvent e)
    {
        // Get element value
        var sign = e.This.StringValue == "-" ? -1 : 1;
        var wishQuantity = settings.VolumeSound + sign * 5;

        // Check if the quantity is valid
        if (wishQuantity <= 0) wishQuantity = 0;
        if (wishQuantity >= 100) wishQuantity = 100;

        // Set the new value
        settings.SetVolume(VolumeType.Sound, wishQuantity);
        // Update the UI
        StateHasChanged();
    }
}
