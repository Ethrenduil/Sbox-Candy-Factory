@using Sandbox
@using Sandbox.UI
@using Eryziac.CandyFactory
@inherits PanelComponent

<root>
    @if (IsVisible)
    {
        <div class="TabMenu">
            @for (int i = 0; i < players.Count; i++)
            {
                <div class="player-container">
                    <div class="player-info" style="border-color: @GetBorderColor(i);">
                        <image class="player-avatar" texture="@GetPlayerAvatar(i)" />
                        <div class="player-name">@players[i].Name</div>
                        <div class="money-container">
                            <div class="player-money">@players[i].GetMoney()</div>
                            <image class="money-icon" src="/textures/ui/money_hud/gold.png" alt="money" />
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</root>

@code
{
    public bool IsVisible { get; set; }
    private List<Player> players;
    private EscapeMenu escapeMenu;
	private Player player;
    private static readonly string[] candyColors = { "#EF8CFF", "#ADD8E6", "#FFFF00", "#90EE90" };

    protected override void OnStart()
    {
        base.OnStart();
        IsVisible = false;
        StateHasChanged();
        escapeMenu = Scene.GetAllComponents<EscapeMenu>().FirstOrDefault();
		player = Scene.GetAllComponents<Player>().FirstOrDefault( x => !x.IsProxy );
    }
    protected override void OnUpdate()
    {
        base.OnUpdate();
        UpdateVisibility();
    }

    void UpdateVisibility()
    {
		player ??= Scene.GetAllComponents<Player>().FirstOrDefault( x => !x.IsProxy );
        if (Input.Down("Score") && !escapeMenu.IsPaused)
        {
			player.InMenu = true;
            UpdatePlayers();
            IsVisible = true;
        }
        else if (Input.Released("Score") || escapeMenu.IsPaused)
        {
			player.InMenu = false;
            IsVisible = false;
        }
        StateHasChanged();
    }

    private string GetPlayerAvatar(int i)
    {
        return $"avatar:{players[i].SteamId}";
    }

    void UpdatePlayers()
    {
        players = Scene.GetAllComponents<Player>().ToList();
    }

    private string GetBorderColor(int index)
    {
        return candyColors[index % candyColors.Length];
    }
}
