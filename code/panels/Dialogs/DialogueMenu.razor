@using Sandbox;
@using Sandbox.UI;
@using Sandbox.Network;
@inherits PanelComponent

<root>
    @if (InDialogue)
    {
        <div class="dialogue">
            <div class = "talkerName">
                @talkerName
            </div>
            <div class = "dialogueText">
                @dialogueText
            </div>
            <button class="nextButton" @onclick="@NextDialogue">@ButtonText</button>
        </div>
    }
</root>

@code {

    [Property]
    public bool InDialogue = false;

	public SkinnedModelRenderer Renderer { get; set; }
    public string talkerName = "Talker";
    public string dialogueText = "Some text";
    public List<string> dialogueLines = new List<string>();
    public int currentDialogueIndex = 0;
    private Player player;
	private List<GameObject> ToLookAt;
	private List<int> Duration;
	private SoundHandle CurrentSound;
	private string SoundPath;
	private CinematicSystem cinematicSystem;
	private string ButtonText => currentDialogueIndex < dialogueLines.Count - 1 ? "Next" : "Close";
	private Settings Settings;

    protected override void OnStart()
    {
        base.OnStart();
        player = Scene.GetAllComponents<Player>().FirstOrDefault( x => !x.IsProxy );
		cinematicSystem = Scene.GetAllComponents<CinematicSystem>().FirstOrDefault();
		Settings = Scene.GetAllComponents<Settings>().FirstOrDefault(x => !x.IsProxy);
    }

    protected override void OnUpdate()
    {
        base.OnUpdate();
		if (CurrentSound != null){
			CurrentSound.Volume = Settings.GetVolume(VolumeType.Sound);
		}
		if (CurrentSound != null && !CurrentSound.IsPlaying)
		{
			Renderer.Set( "talking", false );
		}

        @* if (Input.EscapePressed && InDialogue)
        {
				ChangeState();
        } *@

		Settings ??= Scene.GetAllComponents<Settings>().FirstOrDefault(x => !x.IsProxy);
	
    }

    protected void ChangeState()
    {
		if (player == null)
		{
			player = Scene.GetAllComponents<Player>().FirstOrDefault( x => !x.IsProxy );
		}
		player.InDialogue = !InDialogue;
        InDialogue = !InDialogue;
        StateHasChanged();
		var cam = Scene.GetAllComponents<CameraComponent>().FirstOrDefault();
		if (InDialogue)
		{
			cam.RenderExcludeTags.Add("Player");
		}
		else
		{
			cam.RenderExcludeTags.Remove("Player");
		}
    }

    public void StartDialogue(string name, List<string> dialogue, string soundPath, List<GameObject> toLookAt, List<int> duration)
	{
		ChangeState();
		talkerName = name;
		dialogueLines = dialogue;
		currentDialogueIndex = 0;
		dialogueText = dialogueLines[currentDialogueIndex];
		ToLookAt = toLookAt;
		SoundPath = soundPath;
		Duration = duration;
		SoundEvent soundEvent = new SoundEvent("/sounds/bob/" + SoundPath + ".sound");
		soundEvent.UI = true;
		soundEvent.Volume = Settings.GetVolume(VolumeType.Sound);
		CurrentSound = Sound.Play(soundEvent);
		Renderer ??= Scene.GetAllComponents<Bob>().FirstOrDefault().Components.Get<SkinnedModelRenderer>();
		Renderer.Set( "talking", true );
		cinematicSystem.StartCinematic(player, ToLookAt[currentDialogueIndex], 20);
    }

    public async void NextDialogue()
    {
		player.InCinematic = false;
		cinematicSystem.Next = true;
		cinematicSystem.ShouldStop = true;
		await Task.Delay(30);
		CurrentSound.Stop();
        currentDialogueIndex++;
        if (currentDialogueIndex < dialogueLines.Count)
        {
			SoundEvent soundEvent = new SoundEvent("/sounds/bob/" + SoundPath + "_" + (currentDialogueIndex+1) + ".sound");
			soundEvent.UI = true;
			soundEvent.Volume = Settings.GetVolume(VolumeType.Sound);
			CurrentSound = Sound.Play(soundEvent);
			Renderer.Set( "talking", true );
			cinematicSystem.StartCinematic(player, ToLookAt[currentDialogueIndex], Duration[currentDialogueIndex]);
            dialogueText = dialogueLines[currentDialogueIndex];
            StateHasChanged();
        }
        else
		{
            ChangeState();
			player.InDialogue = false;
			Renderer.Set( "talking", false );
		}
    }
}
